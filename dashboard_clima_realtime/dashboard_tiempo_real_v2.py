import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import time

# Configuraci√≥n de la p√°gina
st.set_page_config(page_title="Dashboard en Tiempo Real", layout="wide")

st.title("üìä Dashboard Interactivo en Tiempo Real")
st.write("Este dashboard simula datos en tiempo real con filtros y gr√°ficos actualizados din√°micamente.")

# --- Inicializar historial en session_state ---
if "historial" not in st.session_state:
    st.session_state.historial = pd.DataFrame(columns=["Tiempo", "Valor", "Categor√≠a"])

# --- Funci√≥n para generar un nuevo lote de datos ---
def generar_datos(n=5):
    tiempo = pd.date_range(end=pd.Timestamp.now(), periods=n, freq="s")  # segundos en min√∫scula
    valor = np.random.normal(loc=50, scale=10, size=n).cumsum() + (st.session_state.historial["Valor"].iloc[-1] if not st.session_state.historial.empty else 0)
    categoria = np.random.choice(["A", "B", "C"], size=n)
    df = pd.DataFrame({"Tiempo": tiempo, "Valor": valor, "Categor√≠a": categoria})
    return df

# --- Filtros interactivos ---
st.sidebar.header("üéõÔ∏è Filtros")
categoria_seleccionada = st.sidebar.multiselect("Seleccionar categor√≠a", ["A", "B", "C"], default=["A", "B", "C"])
mostrar_tabla = st.sidebar.checkbox("Mostrar tabla de datos", value=True)
actualizar = st.sidebar.checkbox("Actualizar autom√°ticamente", value=False)
intervalo = st.sidebar.number_input("Intervalo de actualizaci√≥n (segundos)", min_value=1, max_value=10, value=2)
max_puntos = st.sidebar.number_input("M√°ximo de puntos en historial", min_value=50, max_value=1000, value=200)

# --- Actualizar historial ---
nuevos_datos = generar_datos()
st.session_state.historial = pd.concat([st.session_state.historial, nuevos_datos]).tail(max_puntos)

# --- Aplicar filtros ---
df_filtrado = st.session_state.historial[st.session_state.historial["Categor√≠a"].isin(categoria_seleccionada)]

# --- Layout principal ---
col1, col2 = st.columns(2)

with col1:
    st.subheader("üìà Gr√°fico de l√≠nea")
    fig, ax = plt.subplots()
    for cat in categoria_seleccionada:
        datos_cat = df_filtrado[df_filtrado["Categor√≠a"] == cat]
        ax.plot(datos_cat["Tiempo"], datos_cat["Valor"], label=f"Categor√≠a {cat}")
    ax.set_xlabel("Tiempo")
    ax.set_ylabel("Valor")
    ax.legend()
    st.pyplot(fig)

with col2:
    st.subheader("üìä Gr√°fico de barras por categor√≠a")
    promedio_por_categoria = df_filtrado.groupby("Categor√≠a")["Valor"].mean()
    st.bar_chart(promedio_por_categoria)

if mostrar_tabla:
    st.subheader("üßæ Tabla de datos filtrados")
    st.dataframe(df_filtrado)

# --- Actualizaci√≥n autom√°tica ---
if actualizar:
    time.sleep(intervalo)
    st.experimental_rerun()